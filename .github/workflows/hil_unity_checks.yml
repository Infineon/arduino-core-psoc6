name: Hil Unity Library Checks

# Events triggering the workflow
on:
  push:
  pull_request:

env:
  TEST_VERSION: 1.0.0

jobs:
  set-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-test-matrix.outputs.matrix }}

    steps:
      - name: Checkout repository 
        uses: actions/checkout@v4

      - name: Set test matrix
        id: set-test-matrix
        run: |
          cat ./tests/hil-unity-checklist.json
          matrix=$(jq -c '[.boards[] | { fqbn: .fqbn, single: .tests.single, multi: .tests.multi}]' ./tests/hil-unity-checklist.json)
          echo "::set-output name=matrix::$matrix"

  tests:
    needs: set-test-matrix
    runs-on:
      - self-hosted
      - X64
      - Linux
      - PSoC

    strategy:
      matrix:
        include: ${{ fromJson(needs.set-test-matrix.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-tags: true
          fetch-depth: 0

      - name: Checkout arduino-devops
        uses: actions/checkout@v4
        with:
          repository: Infineon/arduino-devops
          ref: latest
          path: arduino-devops
  
      # - name: Install arduino-cli
      #   run: |
      #     curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | sh -s 1.1.0
      #     sudo mv bin/arduino-cli /usr/local/bin/arduino-cli
      #     arduino-cli version

      - name: Core setup
        if: ${{ inputs.setup-script }} != ''
        run: |
          ${{ inputs.setup-script }}

      - name: Pack Arduino core
        run: |
          python ./arduino-devops/arduino-packager.py --no-version-check --no-previous-releases

      - name: Install Arduino core
        run: |
          python ./arduino-devops/pckg-install-local.py --pckg-dir build

      - name: Remove latest installed platform version
        run: |
          cd ~/.arduino15/packages/infineon/hardware/psoc
          rm -rf *

      - name: copy/link repository to arduino path
        run: |
          mkdir -p ~/.arduino15/packages/infineon/hardware/psoc/$TEST_VERSION
          cp -a ./* ~/.arduino15/packages/infineon/hardware/psoc/$TEST_VERSION
          cd ~/.arduino15/packages/infineon/hardware/psoc/$TEST_VERSION

      - name: copy/link arduino core api path
        run: |
          mkdir -p ~/.arduino15/packages/infineon/hardware/psoc/$TEST_VERSION/cores/psoc/api
          cp -a ~/.arduino15/packages/infineon/hardware/psoc/$TEST_VERSION/extras/arduino-core-api/api/* ~/.arduino15/packages/infineon/hardware/psoc/$TEST_VERSION/cores/psoc/api  
    
      - name: Check ports
        run: |
          cd /opt/runner_support/
          readarray -t SERIALS < <(echo $(./py_checkusb.py --type ${LIB} --json) | jq ".\"${LIB}\".\"${{ env.device }}\"|keys[]" -r)

          # Check if we have one or more serial numbers for this lib or stop here
          if [[ -z $SERIALS ]]; then
            echo "No serial or library information found"
            exit 0
          fi

          # Loop over all serials and fetch the ports
          declare -a PORTS
          for SERIAL in "${SERIALS[@]}"; do
            PORTS+=($(/opt/runner_support/find_usb.sh $SERIAL))
          done
          
          echo "PORTS                  " $PORTS

      - name: Run single board tests
        run: |
          rm -rf ~/artefact
         
          cd ~/.arduino15/packages/infineon/hardware/psoc/$TEST_VERSION/tests/arduino-core-tests/
          echo "=============================================================================================================="
          echo "Run Tests"
          echo "=============================================================================================================="
          for test in ${{ matrix.single }}; do
            make FQBN=${{ matrix.fqbn }} PORT=${PORTS[0]} $test
            mkdir -p ~/artefact/unit_tests/$test
            mv ./build/* ~/artefact/unit_tests/.
            echo "=============================================================================================================="
            echo "Monitor"
            timeout 1m \
                    /opt/runner_support/py_console.py \
                      --port ${PORTS[0]} \
                      --baud 115200 \
                      --report ~/artefact/unit_tests/$test/report.json
            echo "=============================================================================================================="
          done
              
      # Upload the compiled HEX files to the GitHub server
      - name: Artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.fqbn }}
          path: ~/artefact/*
          if-no-files-found: ignore
